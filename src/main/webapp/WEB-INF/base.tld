<?xml version="1.0" encoding="UTF-8" ?>
<taglib xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
	version="2.0">
	<!-- description用来添加对taglib(标签库)的描述 -->
	<description>cal开发的自定义标签库</description>
	<!--taglib(标签库)的版本号 -->
	<tlib-version>1.0</tlib-version>
	<short-name>CalTagLibrary</short-name>
	<!-- 为自定义标签库设置一个uri，uri以/开头，/后面的内容随便写，如这里的/cal， 在Jsp页面中引用标签库时，需要通过uri找到标签库 
		在Jsp页面中就要这样引入标签库：<%@taglib uri="/cal" prefix="cal"%> -->
	<uri>/cal</uri>

	<!-- 一个taglib(标签库)中包含多个自定义标签，每一个自定义标签使用一个tag标记来描述 -->
	<!-- 一个tag标记对应一个自定义标签 -->
	<tag>
		<description>这个标签的作用是用来输出客户端的IP地址</description>
		<!-- 为标签处理器类配一个标签名，在Jsp页面中使用标签时是通过标签名来找到要调用的标签处理器类的 通过viewIP就能找到对应的com.cal.base.common.tag.ViewIPTag类 -->
		<name>viewIP</name>
		<!-- 标签对应的处理器类 -->
		<tag-class>com.cal.base.common.tag.ViewIPTag</tag-class>
		<body-content>empty</body-content>
	</tag>

	<tag>
		<description>这个标签的作用是XXX</description>
		<name>demo1</name>
		<tag-class>com.cal.base.common.tag.OldTagDemo1</tag-class>
		<!--demo1标签有标签体，所以这里的body-content设置为JSP -->
		<body-content>JSP</body-content>
	</tag>

	<tag>
		<description>这个标签的作用是、控制整个jsp页面是否执行</description>
		<name>demo2</name>
		<tag-class>com.cal.base.common.tag.OldTagDemo2</tag-class>
		<!--demo2标签没有标签体，所以这里的body-content设置为empty,如果在用的时候有标签体，就会报错：demo2 must 
			be empty, but is not -->
		<body-content>empty</body-content>
	</tag>

	<tag>
		<description>这个标签的作用是控制jsp页面内容重复执行</description>
		<name>demo3</name>
		<tag-class>com.cal.base.common.tag.OldTagDemo3</tag-class>
		<!--demo2标签没有标签体，所以这里的body-content设置为JSP -->
		<body-content>JSP</body-content>
	</tag>

	<tag>
		<description>这个标签的作用是修改jsp页面内容输出</description>
		<name>demo4</name>
		<tag-class>com.cal.base.common.tag.OldTagDemo4</tag-class>
		<!--demo2标签没有标签体，所以这里的body-content设置为JSP -->
		<body-content>JSP</body-content>
	</tag>
</taglib>