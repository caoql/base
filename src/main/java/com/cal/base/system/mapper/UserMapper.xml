<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cal.base.system.mapper.UserMapper">
	<!-- 开启本mapper的namespace下的二缓存,UserMapper.xml下的sql执行完成会存储到它的缓存区域（HashMap）。 
		type：指定cache接口的实现类的类型，mybatis默认使用PerpetualCache 要和ehcache整合，需要配置type为ehcache实现cache接口的类型 
		注意：开启二级缓存之后查询的结果映射到的pojo必须实现序列化，因为二级缓存数据存储介质多种多样，不一定在内存。 -->
	<!-- <cache type="org.mybatis.caches.ehcache.EhcacheCache"/> -->
	<!-- <cache eviction="LRU" type="com.cal.base.common.cache.RedisCache" flushInterval="5"/> -->

	<resultMap id="BaseResultMap" type="com.cal.base.system.entity.po.UserPO">
		<id column="USER_ID" property="userId" />
		<result column="ACCOUNT" property="account" />
		<result column="NAME" property="name" />
		<result column="PASSWORD" property="password" />
		<result column="PHONE" property="phone" />
		<result column="SEX" property="sex" jdbcType="CHAR" />
		<result column="SYSCODE" property="syscode" />
		<result column="ORG_ID" property="orgId" />
		<result column="IS_ENABLED" property="isEnabled" />
		<result column="REMARK" property="remark" />
		<result column="CREATE_TIME" property="createTime" />
		<result column="CREATOR" property="creator" />
		<result column="UPDATE_TIME" property="updateTime" />
		<result column="UPDATOR" property="updator" />
		<result column="SALT" property="salt" />
	</resultMap>

	<!-- 界面数据展示map定义 -->
	<resultMap type="com.cal.base.system.entity.dto.UserListDTO"
		id="UserListDtoResultMap">
		<id column="USER_ID" property="userId" />
		<result column="ACCOUNT" property="account" />
		<result column="NAME" property="name" />
		<result column="PHONE" property="phone" />
		<result column="SEX" property="sex" />
		<result column="IS_ENABLED" property="isEnabled" />
		<result column="REMARK" property="remark" />
		<result column="CREATE_TIME" property="createTime" />
		<result column="CREATOR" property="creator" />
		<result column="UPDATE_TIME" property="updateTime" />
		<result column="UPDATOR" property="updator" />
		<!-- <association property="userOrganization"
			javaType="com.cal.base.system.entity.po.UserOrganizationPO">
			<result column="ORGANIZATION_ID" property="organizationId" />
		</association>
		<collection property="role" ofType="com.cal.base.system.entity.po.RolePO">
			<id column="ROLE_ID" property="roleId" />
			<result column="ROLE_NAME" property="name" />
		</collection> -->
	</resultMap>

	<select id="listAll" resultMap="UserListDtoResultMap">
		SELECT
			MAIN.USER_ID,
			MAIN.ACCOUNT,
			MAIN.NAME,
			MAIN.PASSWORD,
			MAIN.PHONE,
			MAIN.SEX,
			MAIN.SYSCODE,
			MAIN.ORG_ID,
			MAIN.IS_ENABLED,
			MAIN.REMARK,
			MAIN.CREATE_TIME,
			MAIN.CREATOR,
			MAIN.UPDATE_TIME,
			MAIN.UPDATOR,
			UO.ORGANIZATION_ID,
			ROLE.ROLE_ID,
			ROLE.NAME ROLE_NAME
		FROM SYSTEM_USER MAIN
		LEFT JOIN SYSTEM_USER_ORGANIZATION UO ON MAIN.USER_ID = UO.USER_ID
		LEFT JOIN SYSTEM_USER_ROLE UR ON MAIN.USER_ID = UR.USER_ID
		LEFT JOIN SYSTEM_ROLE ROLE ON UR.ROLE_ID = ROLE.ROLE_ID
		<where>
			<if test="account != null and account != ''">
				AND MAIN.ACCOUNT = #{account}
			</if>
		</where>
	</select>

	<sql id="Base_Column_List">
		USER_ID, ACCOUNT, NAME, PASSWORD, PHONE,
		SEX, SYSCODE,
		ORG_ID, IS_ENABLED, REMARK,
		CREATE_TIME, CREATOR,
		UPDATE_TIME, UPDATOR,SALT
	</sql>

	<!-- 使用resultMap进行输出映射 resultMap：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件中，前边需要加namespace -->
	<!-- 使用resultType进行输出映射，只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功。 如果查询出来的列名和pojo的属性名不一致，通过定义一个resultMap对列名和pojo属性名之间作一个映射关系。 -->
	<select id="selectByPrimaryKey" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from system_user
		where USER_ID = #{userId}
	</select>

	<!-- 通过用户名查询用户 -->
	<select id="selectByLoginName" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from system_user
		where account = #{value}
	</select>

	<!-- 查询条件sql片段 -->
	<sql id="Query_Condition">
		<if test="account != null and account != ''">
			AND ACCOUNT = #{account}
		</if>
		<if test="name != null and name != ''">
			AND NAME = #{name}
		</if>
		<if test="phone != null and phone != ''">
			AND PHONE = #{phone}
		</if>
		<if test="sex != null and sex != ''">
			AND SEX = #{sex}
		</if>
		<if test="isEnabled != null and isEnabled != ''">
			AND IS_ENABLED = #{isEnabled}
		</if>
		<if test="ids != null and ids != ''">
			<!-- 使用 foreach遍历传入ids collection：指定输入对象中集合属性 item：每个遍历生成对象中 open：开始遍历时拼接的串 
				close：结束遍历时拼接的串 separator：遍历的两个对象中需要拼接的串 -->
			<!-- 实现 and USER_ID IN(1,10,16) 拼接 -->
			<foreach collection="ids" item="id" index="index" open="AND USER_ID IN ("
				close=")" separator=",">
				<!-- 每个遍历需要拼接的串 -->
				#{id}
			</foreach>
			<!-- 使用 foreach遍历传入ids collection：指定输入 对象中集合属性 item：每个遍历生成对象中 open：开始遍历时拼接的串 
				close：结束遍历时拼接的串 separator：遍历的两个对象中需要拼接的串 -->
		</if>
	</sql>

	<!-- 使用resultType进行输出映射，只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功。 如果查询出来的列名和pojo中的属性名全部不一致，没有创建pojo对象。 
		只要查询出来的列名和pojo中的属性有一个一致，就会创建pojo对象。 -->
	<!-- 查询出来的结果集只有一行且一列，可以使用简单类型进行输出映射。 -->
	<!-- 不管是输出的pojo单个对象还是一个列表（list中包括pojo），在mapper.xml中resultType指定的类型是一样的。 
		在mapper.java指定的方法返回值类型不一样 -->
	<!-- 生成的动态代理对象中是根据mapper方法的返回值类型确定是调用selectOne(返回单个对象调用)还是selectList （返回集合对象调用 
		）. -->
	<select id="listAll2" resultMap="BaseResultMap">
		select
		<!-- 引用sql片段 的id，如果refid指定的id不在本mapper文件中，需要前边加namespace -->
		<include refid="Base_Column_List" />
		from system_user
		<!-- where可以自动去掉条件中的第一个and -->
		<where>
			<include refid="Query_Condition" />
			<!-- 在这里还要引用其它的sql片段 -->
		</where>
		order by create_time desc
	</select>

	<delete id="deleteByPrimaryKey">
		delete from system_user
		where
		USER_ID = #{userId}
	</delete>

	<!-- 导入批量插入数据 -->
	<insert id="batchInsert" parameterType="java.util.List">
		insert into system_user(USER_ID, ACCOUNT, NAME, PHONE, SEX)
		values
		<foreach collection="list" item="user" separator=",">
			(#{user.userId},#{user.account},#{user.name},#{user.phone},#{user.sex})
		</foreach>
	</insert>

	<insert id="insertSelective">
		insert into system_user
		<!-- 将插入数据的主键返回，返回到user对象中 SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键 
			keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性 order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序 
			resultType：指定SELECT LAST_INSERT_ID()的结果类型 -->
		<!-- <selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Long"> 
			SELECT LAST_INSERT_ID() </selectKey> -->
		<!-- 使用mysql的uuid（）生成主键 执行过程： 首先通过uuid()得到主键，将主键设置到user对象的id属性中 其次在insert执行时，从user对象中取出id属性值 -->
		<selectKey keyProperty="userId" order="BEFORE" resultType="java.lang.String">
			SELECT REPLACE(uuid(),'-','')
		</selectKey>
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				USER_ID,
			</if>
			<if test="account != null">
				ACCOUNT,
			</if>
			<if test="name != null">
				NAME,
			</if>
			<if test="password != null">
				PASSWORD,
			</if>
			<if test="phone != null">
				PHONE,
			</if>
			<if test="sex != null">
				SEX,
			</if>
			<if test="syscode != null">
				SYSCODE,
			</if>
			<if test="orgId != null">
				ORG_ID,
			</if>
			<if test="isEnabled != null">
				IS_ENABLED,
			</if>
			<if test="remark != null">
				REMARK,
			</if>
			<if test="createTime != null">
				CREATE_TIME,
			</if>
			<if test="creator != null">
				CREATOR,
			</if>
			<if test="updateTime != null">
				UPDATE_TIME,
			</if>
			<if test="updator != null">
				UPDATOR,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				#{userId},
			</if>
			<if test="account != null">
				#{account},
			</if>
			<if test="name != null">
				#{name},
			</if>
			<if test="password != null">
				#{password},
			</if>
			<if test="phone != null">
				#{phone},
			</if>
			<if test="sex != null">
				#{sex},
			</if>
			<if test="syscode != null">
				#{syscode},
			</if>
			<if test="orgId != null">
				#{orgId},
			</if>
			<if test="isEnabled != null">
				#{isEnabled},
			</if>
			<if test="remark != null">
				#{remark},
			</if>
			<if test="createTime != null">
				#{createTime},
			</if>
			<if test="creator != null">
				#{creator},
			</if>
			<if test="updateTime != null">
				#{updateTime},
			</if>
			<if test="updator != null">
				#{updator},
			</if>
		</trim>
	</insert>

	<update id="updateByPrimaryKeySelective">
		update system_user
		<set>
			<if test="account != null">
				ACCOUNT = #{account},
			</if>
			<if test="name != null">
				NAME = #{name},
			</if>
			<if test="password != null">
				PASSWORD = #{password},
			</if>
			<if test="phone != null">
				PHONE = #{phone},
			</if>
			<if test="sex != null">
				SEX = #{sex},
			</if>
			<if test="isEnabled != null">
				IS_ENABLED = #{isEnabled},
			</if>
			<if test="remark != null">
				REMARK = #{remark},
			</if>
			<if test="updateTime != null">
				UPDATE_TIME = #{updateTime},
			</if>
			<if test="updator != null">
				UPDATOR = #{updator},
			</if>
		</set>
		where USER_ID = #{userId}
	</update>

	<!-- 通过用户信息获取资源列表 -->
	<select id="getResources" resultType="java.util.Map">
		SELECT DISTINCT
		SR.RESOURCE_ID as id,
		SR.name,
		SR.url,
		SR.type,
		SR.pid
		FROM
		SYSTEM_RESOURCE
		SR
		LEFT JOIN SYSTEM_ROLE_RESOURCE SRR ON SR.RESOURCE_ID =
		SRR.RESOURCE_ID
		LEFT JOIN SYSTEM_USER_ROLE SUR ON SRR.ROLE_ID =
		SUR.ROLE_ID
		WHERE
		SUR.USER_ID = #{userId}
		ORDER BY SR.NODE_ORDER
	</select>
</mapper>